{"ast":null,"code":"import { borderRadius as borderRadiusTokens, colors as colorTokens } from '@workday/canvas-kit-react/tokens';\nimport { ContentDirection, useTheme } from '@workday/canvas-kit-react/common';\n\nvar borderInlineStart = function (isRTL) {\n  return isRTL ? 'borderRight' : 'borderLeft';\n};\n\nvar borderInlineEnd = function (isRTL) {\n  return isRTL ? 'borderLeft' : 'borderRight';\n};\n\nvar borderInlineStartColor = function (isRTL) {\n  return isRTL ? 'borderRightColor' : 'borderLeftColor';\n};\n\nvar borderInlineEndColor = function (isRTL) {\n  return isRTL ? 'borderLeftColor' : 'borderRightColor';\n};\n\nvar borderInlineStartStyle = function (isRTL) {\n  return isRTL ? 'borderRightStyle' : 'borderLeftStyle';\n};\n\nvar borderInlineEndStyle = function (isRTL) {\n  return isRTL ? 'borderLeftStyle' : 'borderRightStyle';\n};\n\nvar borderInlineStartWidth = function (isRTL) {\n  return isRTL ? 'borderRightWidth' : 'borderLeftWidth';\n};\n\nvar borderInlineEndWidth = function (isRTL) {\n  return isRTL ? 'borderLeftWidth' : 'borderRightWidth';\n};\n\nvar borderShorthandProps = {\n  border: 'border',\n  borderTop: 'borderTop',\n  borderRight: 'borderRight',\n  borderBottom: 'borderBottom',\n  borderLeft: 'borderLeft',\n  borderInlineStart: borderInlineStart,\n  borderInlineEnd: borderInlineEnd\n};\nvar borderColors = {\n  borderColor: 'borderColor',\n  borderTopColor: 'borderTopColor',\n  borderRightColor: 'borderRightColor',\n  borderBottomColor: 'borderBottomColor',\n  borderLeftColor: 'borderLeftColor',\n  borderInlineStartColor: borderInlineStartColor,\n  borderInlineEndColor: borderInlineEndColor\n};\nvar borderRadii = {\n  borderRadius: 'borderRadius',\n  borderTopLeftRadius: 'borderTopLeftRadius',\n  borderTopRightRadius: 'borderTopRightRadius',\n  borderBottomLeftRadius: 'borderBottomLeftRadius',\n  borderBottomRightRadius: 'borderBottomRightRadius'\n};\nvar borderStyles = {\n  borderStyle: 'borderStyle',\n  borderTopStyle: 'borderTopStyle',\n  borderRightStyle: 'borderRightStyle',\n  borderBottomStyle: 'borderBottomStyle',\n  borderLeftStyle: 'borderLeftStyle',\n  borderInlineStartStyle: borderInlineStartStyle,\n  borderInlineEndStyle: borderInlineEndStyle\n};\nvar borderWidths = {\n  borderWidth: 'borderWidth',\n  borderTopWidth: 'borderTopWidth',\n  borderRightWidth: 'borderRightWidth',\n  borderBottomWidth: 'borderBottomWidth',\n  borderLeftWidth: 'borderLeftWidth',\n  borderInlineStartWidth: borderInlineStartWidth,\n  borderInlineEndWidth: borderInlineEndWidth\n};\nexport function border(props) {\n  var canvas = useTheme(props.theme).canvas;\n  var isRTL = canvas.direction === ContentDirection.RTL;\n  var styles = {};\n\n  for (var key in props) {\n    if (props.hasOwnProperty(key)) {\n      if (key in borderShorthandProps) {\n        var value = props[key];\n        var attr = void 0;\n\n        if (key === 'borderInlineStart') {\n          attr = borderInlineStart(isRTL);\n        } else if (key === 'borderInlineEnd') {\n          attr = borderInlineEnd(isRTL);\n        } else {\n          attr = borderShorthandProps[key];\n        }\n\n        styles[attr] = value;\n        continue;\n      }\n\n      if (key in borderColors) {\n        var propValue = props[key];\n        var value = colorTokens[propValue] || propValue;\n        var attr = void 0;\n\n        if (key === 'borderInlineStartColor') {\n          attr = borderInlineStartColor(isRTL);\n        } else if (key === 'borderInlineEndColor') {\n          attr = borderInlineEndColor(isRTL);\n        } else {\n          attr = borderColors[key];\n        }\n\n        styles[attr] = value;\n        continue;\n      }\n\n      if (key in borderRadii) {\n        var propValue = props[key];\n        var value = borderRadiusTokens[propValue] || propValue;\n        var attr = borderRadii[key];\n        styles[attr] = value;\n        continue;\n      }\n\n      if (key in borderStyles) {\n        var value = props[key];\n        var attr = void 0;\n\n        if (key === 'borderInlineStartStyle') {\n          attr = borderInlineStartStyle(isRTL);\n        } else if (key === 'borderInlineEndStyle') {\n          attr = borderInlineEndStyle(isRTL);\n        } else {\n          attr = borderStyles[key];\n        }\n\n        styles[attr] = value;\n        continue;\n      }\n\n      if (key in borderWidths) {\n        var value = props[key];\n        var attr = void 0;\n\n        if (key === 'borderInlineStartWidth') {\n          attr = borderInlineStartWidth(isRTL);\n        } else if (key === 'borderInlineEndWidth') {\n          attr = borderInlineEndWidth(isRTL);\n        } else {\n          attr = borderWidths[key];\n        }\n\n        styles[attr] = value;\n      }\n    }\n  }\n\n  return styles;\n}","map":{"version":3,"sources":["/Users/janet.xuishi/node_modules/@workday/canvas-kit-labs-react/dist/es6/common/lib/utils/border.js"],"names":["borderRadius","borderRadiusTokens","colors","colorTokens","ContentDirection","useTheme","borderInlineStart","isRTL","borderInlineEnd","borderInlineStartColor","borderInlineEndColor","borderInlineStartStyle","borderInlineEndStyle","borderInlineStartWidth","borderInlineEndWidth","borderShorthandProps","border","borderTop","borderRight","borderBottom","borderLeft","borderColors","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","borderRadii","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderStyles","borderStyle","borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle","borderWidths","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","props","canvas","theme","direction","RTL","styles","key","hasOwnProperty","value","attr","propValue"],"mappings":"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","sourcesContent":["import { borderRadius as borderRadiusTokens, colors as colorTokens, } from '@workday/canvas-kit-react/tokens';\nimport { ContentDirection, useTheme, } from '@workday/canvas-kit-react/common';\nvar borderInlineStart = function (isRTL) { return (isRTL ? 'borderRight' : 'borderLeft'); };\nvar borderInlineEnd = function (isRTL) { return (isRTL ? 'borderLeft' : 'borderRight'); };\nvar borderInlineStartColor = function (isRTL) { return (isRTL ? 'borderRightColor' : 'borderLeftColor'); };\nvar borderInlineEndColor = function (isRTL) { return (isRTL ? 'borderLeftColor' : 'borderRightColor'); };\nvar borderInlineStartStyle = function (isRTL) { return (isRTL ? 'borderRightStyle' : 'borderLeftStyle'); };\nvar borderInlineEndStyle = function (isRTL) { return (isRTL ? 'borderLeftStyle' : 'borderRightStyle'); };\nvar borderInlineStartWidth = function (isRTL) { return (isRTL ? 'borderRightWidth' : 'borderLeftWidth'); };\nvar borderInlineEndWidth = function (isRTL) { return (isRTL ? 'borderLeftWidth' : 'borderRightWidth'); };\nvar borderShorthandProps = {\n    border: 'border',\n    borderTop: 'borderTop',\n    borderRight: 'borderRight',\n    borderBottom: 'borderBottom',\n    borderLeft: 'borderLeft',\n    borderInlineStart: borderInlineStart,\n    borderInlineEnd: borderInlineEnd,\n};\nvar borderColors = {\n    borderColor: 'borderColor',\n    borderTopColor: 'borderTopColor',\n    borderRightColor: 'borderRightColor',\n    borderBottomColor: 'borderBottomColor',\n    borderLeftColor: 'borderLeftColor',\n    borderInlineStartColor: borderInlineStartColor,\n    borderInlineEndColor: borderInlineEndColor,\n};\nvar borderRadii = {\n    borderRadius: 'borderRadius',\n    borderTopLeftRadius: 'borderTopLeftRadius',\n    borderTopRightRadius: 'borderTopRightRadius',\n    borderBottomLeftRadius: 'borderBottomLeftRadius',\n    borderBottomRightRadius: 'borderBottomRightRadius',\n};\nvar borderStyles = {\n    borderStyle: 'borderStyle',\n    borderTopStyle: 'borderTopStyle',\n    borderRightStyle: 'borderRightStyle',\n    borderBottomStyle: 'borderBottomStyle',\n    borderLeftStyle: 'borderLeftStyle',\n    borderInlineStartStyle: borderInlineStartStyle,\n    borderInlineEndStyle: borderInlineEndStyle,\n};\nvar borderWidths = {\n    borderWidth: 'borderWidth',\n    borderTopWidth: 'borderTopWidth',\n    borderRightWidth: 'borderRightWidth',\n    borderBottomWidth: 'borderBottomWidth',\n    borderLeftWidth: 'borderLeftWidth',\n    borderInlineStartWidth: borderInlineStartWidth,\n    borderInlineEndWidth: borderInlineEndWidth,\n};\nexport function border(props) {\n    var canvas = useTheme(props.theme).canvas;\n    var isRTL = canvas.direction === ContentDirection.RTL;\n    var styles = {};\n    for (var key in props) {\n        if (props.hasOwnProperty(key)) {\n            if (key in borderShorthandProps) {\n                var value = props[key];\n                var attr = void 0;\n                if (key === 'borderInlineStart') {\n                    attr = borderInlineStart(isRTL);\n                }\n                else if (key === 'borderInlineEnd') {\n                    attr = borderInlineEnd(isRTL);\n                }\n                else {\n                    attr = borderShorthandProps[key];\n                }\n                styles[attr] = value;\n                continue;\n            }\n            if (key in borderColors) {\n                var propValue = props[key];\n                var value = colorTokens[propValue] || propValue;\n                var attr = void 0;\n                if (key === 'borderInlineStartColor') {\n                    attr = borderInlineStartColor(isRTL);\n                }\n                else if (key === 'borderInlineEndColor') {\n                    attr = borderInlineEndColor(isRTL);\n                }\n                else {\n                    attr = borderColors[key];\n                }\n                styles[attr] = value;\n                continue;\n            }\n            if (key in borderRadii) {\n                var propValue = props[key];\n                var value = borderRadiusTokens[propValue] || propValue;\n                var attr = borderRadii[key];\n                styles[attr] = value;\n                continue;\n            }\n            if (key in borderStyles) {\n                var value = props[key];\n                var attr = void 0;\n                if (key === 'borderInlineStartStyle') {\n                    attr = borderInlineStartStyle(isRTL);\n                }\n                else if (key === 'borderInlineEndStyle') {\n                    attr = borderInlineEndStyle(isRTL);\n                }\n                else {\n                    attr = borderStyles[key];\n                }\n                styles[attr] = value;\n                continue;\n            }\n            if (key in borderWidths) {\n                var value = props[key];\n                var attr = void 0;\n                if (key === 'borderInlineStartWidth') {\n                    attr = borderInlineStartWidth(isRTL);\n                }\n                else if (key === 'borderInlineEndWidth') {\n                    attr = borderInlineEndWidth(isRTL);\n                }\n                else {\n                    attr = borderWidths[key];\n                }\n                styles[attr] = value;\n            }\n        }\n    }\n    return styles;\n}\n"]},"metadata":{},"sourceType":"module"}