{"ast":null,"code":"import { createHook, useForkRef } from '@workday/canvas-kit-react/common';\nimport React from 'react';\nexport var usePopupPopper = createHook(function (_a, ref) {\n  var state = _a.state,\n      events = _a.events;\n  var elementRef = useForkRef(ref, state.stackRef);\n  var onPlacementChange = React.useCallback(function (placement) {\n    if (placement !== state.placement) {\n      events.updatePlacement({\n        placement: placement\n      });\n    }\n  }, [events, state.placement]);\n  return {\n    open: state.visibility !== 'hidden',\n    anchorElement: state.targetRef,\n    ref: elementRef,\n    onPlacementChange: onPlacementChange\n  };\n});","map":{"version":3,"sources":["/Users/janet.xuishi/node_modules/@workday/canvas-kit-react/dist/es6/popup/lib/hooks/usePopupPopper.js"],"names":["createHook","useForkRef","React","usePopupPopper","_a","ref","state","events","elementRef","stackRef","onPlacementChange","useCallback","placement","updatePlacement","open","visibility","anchorElement","targetRef"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,kCAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAIC,cAAc,GAAGH,UAAU,CAAC,UAAUI,EAAV,EAAcC,GAAd,EAAmB;AACtD,MAAIC,KAAK,GAAGF,EAAE,CAACE,KAAf;AAAA,MAAsBC,MAAM,GAAGH,EAAE,CAACG,MAAlC;AACA,MAAIC,UAAU,GAAGP,UAAU,CAACI,GAAD,EAAMC,KAAK,CAACG,QAAZ,CAA3B;AACA,MAAIC,iBAAiB,GAAGR,KAAK,CAACS,WAAN,CAAkB,UAAUC,SAAV,EAAqB;AAC3D,QAAIA,SAAS,KAAKN,KAAK,CAACM,SAAxB,EAAmC;AAC/BL,MAAAA,MAAM,CAACM,eAAP,CAAuB;AAAED,QAAAA,SAAS,EAAEA;AAAb,OAAvB;AACH;AACJ,GAJuB,EAIrB,CAACL,MAAD,EAASD,KAAK,CAACM,SAAf,CAJqB,CAAxB;AAKA,SAAO;AACHE,IAAAA,IAAI,EAAER,KAAK,CAACS,UAAN,KAAqB,QADxB;AAEHC,IAAAA,aAAa,EAAEV,KAAK,CAACW,SAFlB;AAGHZ,IAAAA,GAAG,EAAEG,UAHF;AAIHE,IAAAA,iBAAiB,EAAEA;AAJhB,GAAP;AAMH,CAdqC,CAA/B","sourcesContent":["import { createHook, useForkRef } from '@workday/canvas-kit-react/common';\nimport React from 'react';\nexport var usePopupPopper = createHook(function (_a, ref) {\n    var state = _a.state, events = _a.events;\n    var elementRef = useForkRef(ref, state.stackRef);\n    var onPlacementChange = React.useCallback(function (placement) {\n        if (placement !== state.placement) {\n            events.updatePlacement({ placement: placement });\n        }\n    }, [events, state.placement]);\n    return {\n        open: state.visibility !== 'hidden',\n        anchorElement: state.targetRef,\n        ref: elementRef,\n        onPlacementChange: onPlacementChange,\n    };\n});\n"]},"metadata":{},"sourceType":"module"}